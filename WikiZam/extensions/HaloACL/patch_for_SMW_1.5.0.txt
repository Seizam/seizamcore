Index: extensions/SemanticMediaWiki/includes/articlepages/SMW_ConceptPage.php
===================================================================
--- extensions/SemanticMediaWiki/includes/articlepages/SMW_ConceptPage.php	(revision 6679)
+++ extensions/SemanticMediaWiki/includes/articlepages/SMW_ConceptPage.php	(working copy)
@@ -66,6 +66,10 @@
 			$this->articles = array();
 			$this->errors = array();
 		}
+/*op-patch|TS|2009-06-19|HaloACL|Semantic protection|start*/
+		wfRunHooks('FilterQueryResults', array(&$result) );
+/*op-patch|TS|2009-06-19|end*/
+		
 	}
 
 	/**
Index: extensions/SemanticMediaWiki/includes/storage/SMW_Description.php
===================================================================
--- extensions/SemanticMediaWiki/includes/storage/SMW_Description.php	(revision 6679)
+++ extensions/SemanticMediaWiki/includes/storage/SMW_Description.php	(working copy)
@@ -420,7 +420,26 @@
 			$description->setPrintRequests(array());
 		}
 	}
-
+	
+/*op-patch|TS|2009-06-19|HaloACL|Semantic protection|start*/
+	public function removeDescriptions($indices) {
+		$num = count($this->m_descriptions);
+		foreach($indices as $i) {
+			if ($num > $i) {
+				$this->m_descriptions[$i] = null;
+			}
+		}
+		
+		$newDescr = array();
+		foreach ($this->m_descriptions as $d) {
+			if ($d) {
+				$newDescr[] = $d;
+			}
+		}
+		$this->m_descriptions = $newDescr;
+	}
+/*op-patch|TS|2009-06-19|end*/
+	
 	public function getQueryString($asvalue = false) {
 		$result = '';
 		foreach ($this->m_descriptions as $desc) {
@@ -557,6 +576,25 @@
 		$description->setPrintRequests(array());
 	}
 
+/*op-patch|TS|2009-06-19|HaloACL|Semantic protection|start*/
+	public function removeDescriptions($indices) {
+		$num = count($this->m_descriptions);
+		foreach($indices as $i) {
+			if ($num > $i) {
+				$this->m_descriptions[$i] = null;
+			}
+		}
+		
+		$newDescr = array();
+		foreach ($this->m_descriptions as $d) {
+			if ($d) {
+				$newDescr[] = $d;
+			}
+		}
+		$this->m_descriptions = $newDescr;
+	}
+/*op-patch|TS|2009-06-19|end*/
+	
 	public function getQueryString($asvalue = false) {
 		if ($this->m_true) {
 			return '+';
Index: extensions/SemanticMediaWiki/includes/storage/SMW_QueryResult.php
===================================================================
--- extensions/SemanticMediaWiki/includes/storage/SMW_QueryResult.php	(revision 6679)
+++ extensions/SemanticMediaWiki/includes/storage/SMW_QueryResult.php	(working copy)
@@ -162,6 +162,41 @@
 		return $result;
 	}
 
+	/*op-patch|TS|2009-06-19|HaloACL|Semantic protection|start*/
+
+	/**
+	 * Creates a new query result based on $this query result. Everything
+	 * but the content of $this query result is copied into the new one.
+	 * This is useful for query result filters which copy the content only partly.
+	 *
+	 * @param SMWQueryResult $this
+	 * 		The following parts of this query result are copied into the new q.r.:
+	 * 		- print requests
+	 * 		- query, querystring
+	 * 	 	- furtherres
+	 * 	 	- extra printouts
+	 * @param array
+	 * 		An array of results e.g. the set of filtered results of the original query.
+	 * 		If the new q.r. should have no results then pass an empty array.
+	 *
+	 * @return SMWQueryResult
+	 * 		A partly copied $queryResult
+	 */
+	public function newFromQueryResult($results) {
+		$classname = get_class($this);
+		
+		$qr = new $classname($this->m_printrequests,
+							 $this->m_query,
+							 $results,
+							 $this->m_store,
+							 $this->m_furtherres);
+		$qr->m_querystring = $this->m_querystring;
+		$qr->m_extraprintouts = $this->m_extraprintouts;
+
+		return $qr;
+	}
+	/*op-patch|TS|2009-06-19|end*/
+
 }
 
 /**
@@ -175,6 +210,14 @@
 	protected $m_result;
 	protected $m_store;
 	protected $m_content;
+	
+	/*op-patch|TS|2010-04-19|HaloACL|Semantic protection|start*/
+	protected $m_isFiltered = false;  // true, if the result has already been
+									  // filtered by semantic protection
+	protected $m_valuesRemoved = false;  // true, if values were removed by 
+										 // semantic protection 
+	/*op-patch|TS|2010-04-19|end*/
+	
 
 	static protected $catcacheobj = false;
 	static protected $catcache = false;
@@ -201,6 +244,9 @@
 	 */
 	public function getContent() {
 		$this->loadContent();
+/*op-patch|TS|2010-04-19|HaloACL|Semantic protection|start*/
+		$this->filterContent();
+/*op-patch|TS|2010-04-19|end*/
 		return $this->m_content;
 	}
 
@@ -217,6 +263,9 @@
 	 */
 	public function getNextObject() {
 		$this->loadContent();
+/*op-patch|TS|2010-04-19|HaloACL|Semantic protection|start*/
+		$this->filterContent();
+/*op-patch|TS|2010-04-19|end*/
 		$result = current($this->m_content);
 		next($this->m_content);
 		return $result;
@@ -331,5 +380,39 @@
 		return $options;
 	}
 
+
+	/*op-patch|TS|2010-04-19|HaloACL|Semantic protection|start*/
+	
+	/**
+	 * Filters the content of this result array. All protected pages are removed
+	 * from the result.
+	 * 
+	 */
+	protected function filterContent() {
+		if ($this->m_isFiltered) {
+			return;
+		}
+		$this->m_isFiltered = true;
+		// Iterate over the complete content, but not with "foreach" as this moves
+		// the current pointer to the end of the array
+		for ($i = 0, $l = count($this->m_content); $i < $l; ++$i) {
+			$object = $this->m_content[$i];
+			$allowed = true;
+			if ($object->getTypeID() == '_wpg') {
+				// Link to another page which might be protected
+				global $wgUser;
+				wfRunHooks('userCan', array($object->getTitle(), &$wgUser, 
+				                            "read", &$allowed));
+			}
+			if (!$allowed) {
+				unset($this->m_content[$i]);
+				$this->m_valuesRemoved = true;
+			}
+		}
+		if ($this->m_valuesRemoved) {
+			$this->m_content = array_values($this->m_content);
+		}
+	}
+	/*op-patch|TS|2010-04-19|end*/
 }
 
Index: extensions/SemanticMediaWiki/includes/storage/SMW_SQLStore2.php
===================================================================
--- extensions/SemanticMediaWiki/includes/storage/SMW_SQLStore2.php	(revision 6679)
+++ extensions/SemanticMediaWiki/includes/storage/SMW_SQLStore2.php	(working copy)
@@ -856,7 +856,17 @@
 		global $smwgIP;
 		include_once("$smwgIP/includes/storage/SMW_SQLStore2_Queries.php");
 		$qe = new SMWSQLStore2QueryEngine($this,wfGetDB( DB_SLAVE ));
+/*op-patch|TS|2009-06-19|HaloACL|Semantic protection|start*/
+		wfRunHooks('RewriteQuery', array(&$query) );
+/*op-patch|TS|2009-06-19|end*/
+		
 		$result = $qe->getQueryResult($query);
+/*op-patch|TS|2009-06-19|HaloACL|Semantic protection|start*/
+		if ($result instanceof SMWQueryResult) {
+			wfRunHooks('FilterQueryResults', array(&$result) );
+		}
+/*op-patch|TS|2009-06-19|end*/
+		
 		wfProfileOut('SMWSQLStore2::getQueryResult (SMW)');
 		return $result;
 	}
Index: extensions/SemanticMediaWiki/includes/SMW_DV_Bool.php
===================================================================
--- extensions/SemanticMediaWiki/includes/SMW_DV_Bool.php	(revision 6679)
+++ extensions/SemanticMediaWiki/includes/SMW_DV_Bool.php	(working copy)
@@ -83,19 +83,39 @@
 
 	public function getShortWikiText($linked = null) {
 		$this->unstub();
+/*op-patch|TS|2009-07-10|HaloACL|Semantic protection|start*/
+		if (($protected = parent::getProtectionCaption()) !== false) {
+			return $protected;
+		}
+/*op-patch|TS|2009-07-10|end*/
 		return $this->m_caption;
 	}
 
 	public function getShortHTMLText($linker = null) {
 		$this->unstub();
+/*op-patch|TS|2009-07-10|HaloACL|Semantic protection|start*/
+		if (($protected = parent::getProtectionCaption()) !== false) {
+			return $protected;
+		}
+/*op-patch|TS|2009-07-10|end*/
 		return $this->m_caption;
 	}
 
 	public function getLongWikiText($linked = null) {
+/*op-patch|TS|2009-07-10|HaloACL|Semantic protection|start*/
+		if (($protected = parent::getProtectionCaption()) !== false) {
+			return $protected;
+		}
+/*op-patch|TS|2009-07-10|end*/
 		return $this->isValid()?$this->m_stdcaption:$this->getErrorText();
 	}
 
 	public function getLongHTMLText($linker = null) {
+/*op-patch|TS|2009-07-10|HaloACL|Semantic protection|start*/
+		if (($protected = parent::getProtectionCaption()) !== false) {
+			return $protected;
+		}
+/*op-patch|TS|2009-07-10|end*/
 		return $this->isValid()?$this->m_stdcaption:$this->getErrorText();
 	}
 
@@ -122,6 +142,11 @@
 	}
 
 	public function getExportData() {
+/*op-patch|TS|2009-08-07|HaloACL|Semantic protection|start*/
+		if ($this->m_property && !$this->m_property->userCan('propertyread')) {
+			return NULL;
+		}
+/*op-patch|TS|2009-08-07|end*/
 		if ($this->isValid()) {
 			$xsdvalue =  $this->m_value?'true':'false';
 			$lit = new SMWExpLiteral($xsdvalue, $this, 'http://www.w3.org/2001/XMLSchema#boolean');
Index: extensions/SemanticMediaWiki/includes/SMW_DV_Concept.php
===================================================================
--- extensions/SemanticMediaWiki/includes/SMW_DV_Concept.php	(revision 6679)
+++ extensions/SemanticMediaWiki/includes/SMW_DV_Concept.php	(working copy)
@@ -47,6 +47,11 @@
 
 	public function getShortWikiText($linked = null) {
 		$this->unstub();
+/*op-patch|TS|2009-07-10|HaloACL|Semantic protection|start*/
+		if (($protected = parent::getProtectionCaption()) !== false) {
+			return $protected;
+		}
+/*op-patch|TS|2009-07-10|end*/
 		return $this->m_caption;
 	}
 
@@ -55,6 +60,11 @@
 	}
 
 	public function getLongWikiText($linked = null) {
+/*op-patch|TS|2009-07-10|HaloACL|Semantic protection|start*/
+		if (($protected = parent::getProtectionCaption()) !== false) {
+			return $protected;
+		}
+/*op-patch|TS|2009-07-10|end*/
 		if (!$this->isValid()) {
 			return $this->getErrorText();
 		} else {
@@ -63,6 +73,11 @@
 	}
 
 	public function getLongHTMLText($linker = null) {
+/*op-patch|TS|2009-07-10|HaloACL|Semantic protection|start*/
+		if (($protected = parent::getProtectionCaption()) !== false) {
+			return $protected;
+		}
+/*op-patch|TS|2009-07-10|end*/
 		if (!$this->isValid()) {
 			return $this->getErrorText();
 		} else {
@@ -93,6 +108,11 @@
 	}
 
 	public function getExportData() {
+/*op-patch|TS|2009-08-07|HaloACL|Semantic protection|start*/
+		if ($this->m_property && !$this->m_property->userCan('propertyread')) {
+			return NULL;
+		}
+/*op-patch|TS|2009-08-07|end*/
 		if ($this->isValid()) {
 			$qp = new SMWQueryParser();
 			$desc = $qp->getQueryDescription($this->getWikiValue());
Index: extensions/SemanticMediaWiki/includes/SMW_DV_GeoCoords.php
===================================================================
--- extensions/SemanticMediaWiki/includes/SMW_DV_GeoCoords.php	(revision 6679)
+++ extensions/SemanticMediaWiki/includes/SMW_DV_GeoCoords.php	(working copy)
@@ -160,6 +160,11 @@
 	}
 
 	public function getShortWikiText($linked = NULL) {
+/*op-patch|TS|2009-07-10|HaloACL|Semantic protection|start*/
+		if (($protected = parent::getProtectionCaption()) !== false) {
+			return $protected;
+		}
+/*op-patch|TS|2009-07-10|end*/
 		if ($this->isValid() && ($linked !== NULL) && ($linked !== false)) {
 			wfLoadExtensionMessages('SemanticMediaWiki');
 			SMWOutputs::requireHeadItem(SMW_HEADER_TOOLTIP);
@@ -177,6 +182,11 @@
 	}
 
 	public function getLongWikiText($linked = NULL) {
+/*op-patch|TS|2009-07-10|HaloACL|Semantic protection|start*/
+		if (($protected = parent::getProtectionCaption()) !== false) {
+			return $protected;
+		}
+/*op-patch|TS|2009-07-10|end*/
 		if (!$this->isValid()) {
 			return $this->getErrorText();
 		} else {
@@ -199,6 +209,11 @@
 	}
 
 	public function getExportData() {
+/*op-patch|TS|2009-08-07|HaloACL|Semantic protection|start*/
+		if ($this->m_property && !$this->m_property->userCan('propertyread')) {
+			return NULL;
+		}
+/*op-patch|TS|2009-08-07|end*/
 		if ($this->isValid()) {
 			$lit = new SMWExpLiteral($this->formatAngleValues(true, false) . ', ' . $this->formatAngleValues(false, false), $this, 'http://www.w3.org/2001/XMLSchema#string');
 			return new SMWExpData($lit);
Index: extensions/SemanticMediaWiki/includes/SMW_DV_NAry.php
===================================================================
--- extensions/SemanticMediaWiki/includes/SMW_DV_NAry.php	(revision 6679)
+++ extensions/SemanticMediaWiki/includes/SMW_DV_NAry.php	(working copy)
@@ -101,6 +101,11 @@
 	protected function unstub() {}
 
 	public function getShortWikiText($linked = NULL) {
+/*op-patch|TS|2009-07-10|HaloACL|Semantic protection|start*/
+		if (($protected = parent::getProtectionCaption()) !== false) {
+			return $protected;
+		}
+/*op-patch|TS|2009-07-10|end*/
 		if ($this->m_caption !== false) {
 			return $this->m_caption;
 		}
@@ -108,6 +113,11 @@
 	}
 
 	public function getShortHTMLText($linker = NULL) {
+/*op-patch|TS|2009-07-10|HaloACL|Semantic protection|start*/
+		if (($protected = parent::getProtectionCaption()) !== false) {
+			return $protected;
+		}
+/*op-patch|TS|2009-07-10|end*/
 		if ($this->m_caption !== false) {
 			return $this->m_caption;
 		}
@@ -115,10 +125,20 @@
 	}
 
 	public function getLongWikiText($linked = NULL) {
+/*op-patch|TS|2009-07-10|HaloACL|Semantic protection|start*/
+		if (($protected = parent::getProtectionCaption()) !== false) {
+			return $protected;
+		}
+/*op-patch|TS|2009-07-10|end*/
 		return $this->makeOutputText(2, $linked);
 	}
 
 	public function getLongHTMLText($linker = NULL) {
+/*op-patch|TS|2009-07-10|HaloACL|Semantic protection|start*/
+		if (($protected = parent::getProtectionCaption()) !== false) {
+			return $protected;
+		}
+/*op-patch|TS|2009-07-10|end*/
 		return $this->makeOutputText(3, $linker);
 	}
 
@@ -277,6 +297,11 @@
 	}
 
 	public function getExportData() {
+/*op-patch|TS|2009-08-07|HaloACL|Semantic protection|start*/
+		if ($this->m_property && !$this->m_property->userCan('propertyread')) {
+			return NULL;
+		}
+/*op-patch|TS|2009-08-07|end*/
 		if (!$this->isValid()) return NULL;
 
 		$result = new SMWExpData(new SMWExpElement('', $this)); // bnode
Index: extensions/SemanticMediaWiki/includes/SMW_DV_Number.php
===================================================================
--- extensions/SemanticMediaWiki/includes/SMW_DV_Number.php	(revision 6679)
+++ extensions/SemanticMediaWiki/includes/SMW_DV_Number.php	(working copy)
@@ -94,6 +94,11 @@
 
 	public function getShortWikiText($linked = null) {
 		$this->unstub();
+/*op-patch|TS|2009-07-10|HaloACL|Semantic protection|start*/
+		if (($protected = parent::getProtectionCaption()) !== false) {
+			return $protected;
+		}
+/*op-patch|TS|2009-07-10|end*/
 		if (($linked === null) || ($linked === false) || ($this->m_outformat == '-') ) {
 			return $this->m_caption;
 		}
@@ -128,6 +133,12 @@
 
 	public function getLongWikiText($linked = null) {
 		$this->unstub();
+/*op-patch|TS|2009-07-10|HaloACL|Semantic protection|start*/
+		if (($protected = parent::getProtectionCaption()) !== false) {
+			return $protected;
+		}
+/*op-patch|TS|2009-07-10|end*/
+		
 		if (!$this->isValid()) {
 			return $this->getErrorText();
 		} else {
@@ -210,6 +221,11 @@
 
 	public function getExportData() {
 		$this->unstub();
+/*op-patch|TS|2009-08-07|HaloACL|Semantic protection|start*/
+		if ($this->m_property && !$this->m_property->userCan('propertyread')) {
+			return NULL;
+		}
+/*op-patch|TS|2009-08-07|end*/
 		if ($this->isValid()) {
 			$lit = new SMWExpLiteral($this->m_value, $this, 'http://www.w3.org/2001/XMLSchema#double');
 			return new SMWExpData($lit);
Index: extensions/SemanticMediaWiki/includes/SMW_DV_Property.php
===================================================================
--- extensions/SemanticMediaWiki/includes/SMW_DV_Property.php	(revision 6679)
+++ extensions/SemanticMediaWiki/includes/SMW_DV_Property.php	(working copy)
@@ -197,6 +197,11 @@
 	 */
 	public function isShown() {
 		$this->unstub();
+/*op-patch|TS|2009-07-10|HaloACL|Semantic protection|start*/
+		if (!$this->userCan("propertyread")) {
+			return false;
+		}
+/*op-patch|TS|2009-07-10|end*/
 		return (($this->m_propertyid == '') ||
 		        (array_key_exists($this->m_propertyid, SMWPropertyvalue::$m_propertytypes) &&
 		         SMWPropertyvalue::$m_propertytypes[$this->m_propertyid][1]) );
@@ -335,6 +340,33 @@
 	public function getDBkey() {
 		return $this->isVisible()?$this->m_wikipage->getDBkey():$this->m_propertyid;
 	}
+	
+/*op-patch|TS|2009-07-10|HaloACL|Semantic protection|start*/
+	/**
+	 * Checks if the current user can access the value of this property according
+	 * to the $actionID.
+	 * 
+	 * @param string $actionID
+	 * 	The ID of the action that is requested on this property:
+	 * 		propertyread, propertyformedit, propertyedit 
+	 * 
+	 * @return bool
+	 * 	<true> if the current user is authorized to access this property
+	 *  <false> otherwise
+	 *
+	 */
+	public function userCan($actionID) {
+		$this->unstub();
+		if ($this->m_wikipage) {
+			$t = $this->m_wikipage->getTitle();
+			global $wgUser;
+			if (!wfRunHooks('userCan', array(&$t, &$wgUser, $actionID, &$result))) {
+				return $result;
+			}
+		}
+		return true;
+	}
+/*op-patch|TS|2009-07-10|end*/
 
 	public function getText() {
 		return $this->isVisible()?$this->m_wikipage->getWikiValue():'';
Index: extensions/SemanticMediaWiki/includes/SMW_DV_String.php
===================================================================
--- extensions/SemanticMediaWiki/includes/SMW_DV_String.php	(revision 6679)
+++ extensions/SemanticMediaWiki/includes/SMW_DV_String.php	(working copy)
@@ -40,6 +40,12 @@
 
 	public function getShortWikiText($linked = null) {
 		$this->unstub();
+/*op-patch|TS|2009-07-10|HaloACL|Semantic protection|start*/
+		if (($protected = parent::getProtectionCaption()) !== false) {
+			return $protected;
+		}
+/*op-patch|TS|2009-07-10|end*/
+		
 		//TODO: Support linking?
 		return $this->m_caption;
 	}
@@ -48,10 +54,20 @@
 	 * @todo Rather parse input to obtain properly formatted HTML.
 	 */
 	public function getShortHTMLText($linker = null) {
+/*op-patch|TS|2009-07-10|HaloACL|Semantic protection|start*/
+		if (($protected = parent::getProtectionCaption()) !== false) {
+			return $protected;
+		}
+/*op-patch|TS|2009-07-10|end*/
 		return smwfXMLContentEncode($this->getShortWikiText($linker));
 	}
 
 	public function getLongWikiText($linked = null) {
+/*op-patch|TS|2009-07-10|HaloACL|Semantic protection|start*/
+		if (($protected = parent::getProtectionCaption()) !== false) {
+			return $protected;
+		}
+/*op-patch|TS|2009-07-10|end*/
 		return $this->isValid()?$this->getAbbValue($linked,$this->m_value):$this->getErrorText();
 	}
 
@@ -59,6 +75,11 @@
 	 * @todo Rather parse input to obtain properly formatted HTML.
 	 */
 	public function getLongHTMLText($linker = null) {
+/*op-patch|TS|2009-07-10|HaloACL|Semantic protection|start*/
+		if (($protected = parent::getProtectionCaption()) !== false) {
+			return $protected;
+		}
+/*op-patch|TS|2009-07-10|end*/
 		return $this->isValid()?$this->getAbbValue($linker,smwfXMLContentEncode($this->m_value)):$this->getErrorText();
 	}
 
@@ -114,6 +135,11 @@
 	}
 
 	public function getExportData() {
+/*op-patch|TS|2009-08-07|HaloACL|Semantic protection|start*/
+		if ($this->m_property && !$this->m_property->userCan('propertyread')) {
+			return NULL;
+		}
+/*op-patch|TS|2009-08-07|end*/
 		if ($this->isValid()) {
 			$lit = new SMWExpLiteral(smwfHTMLtoUTF8($this->m_value), $this, 'http://www.w3.org/2001/XMLSchema#string');
 			return new SMWExpData($lit);
Index: extensions/SemanticMediaWiki/includes/SMW_DV_Time.php
===================================================================
--- extensions/SemanticMediaWiki/includes/SMW_DV_Time.php	(revision 6679)
+++ extensions/SemanticMediaWiki/includes/SMW_DV_Time.php	(working copy)
@@ -479,6 +479,11 @@
 
 	public function getShortWikiText($linked = NULL) {
 		$this->unstub();
+/*op-patch|TS|2009-07-10|HaloACL|Semantic protection|start*/
+		if (($protected = parent::getProtectionCaption()) !== false) {
+			return $protected;
+		}
+/*op-patch|TS|2009-07-10|end*/
 		if ($this->m_caption !== false) {
 			return $this->m_caption;
 		} else {
@@ -488,10 +493,20 @@
 	}
 
 	public function getShortHTMLText($linker = NULL) {
+/*op-patch|TS|2009-07-10|HaloACL|Semantic protection|start*/
+		if (($protected = parent::getProtectionCaption()) !== false) {
+			return $protected;
+		}
+/*op-patch|TS|2009-07-10|end*/
 		return $this->getShortWikiText($linker); // should be safe (based on xsdvalue)
 	}
 
 	public function getLongWikiText($linked = NULL) {
+/*op-patch|TS|2009-07-10|HaloACL|Semantic protection|start*/
+		if (($protected = parent::getProtectionCaption()) !== false) {
+			return $protected;
+		}
+/*op-patch|TS|2009-07-10|end*/
 		if (!$this->isValid()) {
 			return $this->getErrorText();
 		} else {
@@ -501,6 +516,11 @@
 	}
 
 	public function getLongHTMLText($linker = NULL) {
+/*op-patch|TS|2009-07-10|HaloACL|Semantic protection|start*/
+		if (($protected = parent::getProtectionCaption()) !== false) {
+			return $protected;
+		}
+/*op-patch|TS|2009-07-10|end*/
 		return $this->getLongWikiText($linker);
 	}
 
@@ -542,6 +562,11 @@
 	}
 
 	public function getExportData() {
+/*op-patch|TS|2009-08-07|HaloACL|Semantic protection|start*/
+		if ($this->m_property && !$this->m_property->userCan('propertyread')) {
+			return NULL;
+		}
+/*op-patch|TS|2009-08-07|end*/
 		if ($this->isValid()) {
 			$lit = new SMWExpLiteral($this->getXMLSchemaDate(), $this, 'http://www.w3.org/2001/XMLSchema#dateTime');
 			return new SMWExpData($lit);
Index: extensions/SemanticMediaWiki/includes/SMW_DV_URI.php
===================================================================
--- extensions/SemanticMediaWiki/includes/SMW_DV_URI.php	(revision 6679)
+++ extensions/SemanticMediaWiki/includes/SMW_DV_URI.php	(working copy)
@@ -202,6 +202,11 @@
 
 	public function getShortWikiText($linked = null) {
 		$this->unstub();
+/*op-patch|TS|2009-07-10|HaloACL|Semantic protection|start*/
+		if (($protected = parent::getProtectionCaption()) !== false) {
+			return $protected;
+		}
+/*op-patch|TS|2009-07-10|end*/
 		if ( ($linked === null) || ($linked === false) || ($this->m_outformat == '-') || ($this->m_url == '') || ($this->m_caption == '') ) {
 			return $this->m_caption;
 		} else {
@@ -211,6 +216,11 @@
 
 	public function getShortHTMLText($linker = null) {
 		$this->unstub();
+/*op-patch|TS|2009-07-10|HaloACL|Semantic protection|start*/
+		if (($protected = parent::getProtectionCaption()) !== false) {
+			return $protected;
+		}
+/*op-patch|TS|2009-07-10|end*/
 		if (($linker === null) || (!$this->isValid()) || ($this->m_outformat == '-') || ($this->m_url == '') || ($this->m_caption == '')) {
 			return $this->m_caption;
 		} else {
@@ -219,6 +229,11 @@
 	}
 
 	public function getLongWikiText($linked = null) {
+/*op-patch|TS|2009-07-10|HaloACL|Semantic protection|start*/
+		if (($protected = parent::getProtectionCaption()) !== false) {
+			return $protected;
+		}
+/*op-patch|TS|2009-07-10|end*/
 		if (!$this->isValid()) {
 			return $this->getErrorText();
 		}
@@ -230,6 +245,11 @@
 	}
 
 	public function getLongHTMLText($linker = null) {
+/*op-patch|TS|2009-07-10|HaloACL|Semantic protection|start*/
+		if (($protected = parent::getProtectionCaption()) !== false) {
+			return $protected;
+		}
+/*op-patch|TS|2009-07-10|end*/
 		if (!$this->isValid()) {
 			return $this->getErrorText();
 		}
@@ -271,6 +291,11 @@
 	}
 
 	public function getExportData() {
+/*op-patch|TS|2009-08-07|HaloACL|Semantic protection|start*/
+		if ($this->m_property && !$this->m_property->userCan('propertyread')) {
+			return NULL;
+		}
+/*op-patch|TS|2009-08-07|end*/
 		if ($this->isValid()) {
 			$res = new SMWExpResource(str_replace('&','&amp;', $this->m_uri), $this);
 			return new SMWExpData($res);
Index: extensions/SemanticMediaWiki/includes/SMW_DV_WikiPage.php
===================================================================
--- extensions/SemanticMediaWiki/includes/SMW_DV_WikiPage.php	(revision 6679)
+++ extensions/SemanticMediaWiki/includes/SMW_DV_WikiPage.php	(working copy)
@@ -128,6 +128,11 @@
 	}
 
 	public function getShortWikiText($linked = null) {
+/*op-patch|TS|2009-07-10|HaloACL|Semantic protection|start*/
+		if (($protected = parent::getProtectionCaption()) !== false) {
+			return $protected;
+		}
+/*op-patch|TS|2009-07-10|end*/
 		$this->unstub();
 		if ( ($linked === null) || ($linked === false) || ($this->m_outformat == '-') || (!$this->isValid()) || ($this->m_caption === '') ) {
 			return $this->getCaption();
@@ -139,6 +144,11 @@
 
 	public function getShortHTMLText($linker = null) {
 		$this->unstub();
+/*op-patch|TS|2009-07-10|HaloACL|Semantic protection|start*/
+		if (($protected = parent::getProtectionCaption()) !== false) {
+			return $protected;
+		}
+/*op-patch|TS|2009-07-10|end*/
 		if ( ($linker !== null) && ($this->m_caption !== '') && ($this->m_outformat != '-') ) { $this->getTitle(); } // init the Title object, may reveal hitherto unnoticed errors
 		if ( ($linker === null) || (!$this->isValid()) || ($this->m_outformat == '-') || ($this->m_caption === '') ) {
 			return htmlspecialchars($this->getCaption());
@@ -156,6 +166,11 @@
 	 */
 	public function getLongWikiText($linked = null) {
 		$this->unstub();
+/*op-patch|TS|2009-07-10|HaloACL|Semantic protection|start*/
+		if (($protected = parent::getProtectionCaption()) !== false) {
+			return $protected;
+		}
+/*op-patch|TS|2009-07-10|end*/
 		if (!$this->isValid()) {
 			return $this->getErrorText();
 		}
@@ -170,6 +185,11 @@
 
 	public function getLongHTMLText($linker = null) {
 		$this->unstub();
+/*op-patch|TS|2009-07-10|HaloACL|Semantic protection|start*/
+		if (($protected = parent::getProtectionCaption()) !== false) {
+			return $protected;
+		}
+/*op-patch|TS|2009-07-10|end*/
 		if ( ($linker !== null) && ($this->m_outformat != '-') ) { $this->getTitle(); } // init the Title object, may reveal hitherto unnoticed errors
 		if (!$this->isValid()) {
 			return $this->getErrorText();
@@ -225,6 +245,11 @@
 	}
 
 	public function getExportData() {
+/*op-patch|TS|2009-08-07|HaloACL|Semantic protection|start*/
+		if ($this->m_property && !$this->m_property->userCan('propertyread')) {
+			return NULL;
+		}
+/*op-patch|TS|2009-08-07|end*/
 		if (!$this->isValid()) return null;
 		switch ($this->getNamespace()) {
 			case NS_MEDIA: // special handling for linking media files directly
Index: extensions/SemanticMediaWiki/includes/SMW_DataValue.php
===================================================================
--- extensions/SemanticMediaWiki/includes/SMW_DataValue.php	(revision 6679)
+++ extensions/SemanticMediaWiki/includes/SMW_DataValue.php	(working copy)
@@ -614,6 +614,11 @@
 	 * If the value is empty or invalid, NULL is returned.
 	 */
 	public function getExportData() { // default implementation: encode values as untyped string
+/*op-patch|TS|2009-08-07|HaloACL|Semantic protection|start*/
+		if ($this->m_property && !$this->m_property->userCan('propertyread')) {
+			return NULL;
+		}
+/*op-patch|TS|2009-08-07|end*/
 		if ($this->isValid()) {
 			$lit = new SMWExpLiteral(smwfHTMLtoUTF8(implode(';',$this->getDBkeys())), $this);
 			return new SMWExpData($lit);
@@ -705,6 +710,27 @@
 		return $this->getValueKey();
 	}
 
+/*op-patch|TS|2009-07-10|HaloACL|Semantic protection|start*/
+	/**
+	 * Checks if the property of this data value is protected. In this case a
+	 * replacement text is returned and an error message for is set.
+	 * 
+	 * @return bool / string
+	 * 	<false>, if the property is not protected or a
+	 *  caption, if it is.
+	 *
+	 */
+	public function getProtectionCaption() {
+		$prop = $this->m_property;
+		if ($prop && !$prop->userCan('propertyread')){
+			wfLoadExtensionMessages('SemanticMediaWiki');
+			$this->m_errors = array(wfMsgForContent('smw_protected_property_error'));
+			return "<nowiki>***</nowiki>";
+		}
+		return false;
+	}
+/*op-patch|TS|2009-07-10|end*/
+
 }
 
 

Index: extensions/SemanticMediaWiki/languages/SMW_Messages.php
===================================================================
--- extensions/SemanticMediaWiki/languages/SMW_Messages.php	(revision 6679)
+++ extensions/SemanticMediaWiki/languages/SMW_Messages.php	(working copy)
@@ -317,6 +317,12 @@
 	'smw_adminlinks_datastructure' => 'Data structure',
 	'smw_adminlinks_displayingdata' => 'Displaying data',
 	'smw_adminlinks_inlinequerieshelp' => 'Inline queries help',
+
+/*op-patch|TS|2009-07-10|HaloACL|Semantic protection|start*/
+	// Messages for semantic protection
+	'smw_protected_property_error' => "The value of a protected property is hidden.",
+/*op-patch|TS|2009-07-10|end*/
+
 );
 
 /** Message documentation (Message documentation)
@@ -1966,6 +1972,12 @@
 	'smw_adminlinks_datastructure' => 'Datenstruktur',
 	'smw_adminlinks_displayingdata' => 'Daten anzeigen',
 	'smw_adminlinks_inlinequerieshelp' => 'Inline-Abfragen-Hilfe',
+
+/*op-patch|TS|2009-07-10|HaloACL|Semantic protection|start*/
+	// Messages for semantic protection
+	'smw_protected_property_error' => "Der Wert eines geschÃ¼tzten Attributs wird nicht angezeigt."
+/*op-patch|TS|2009-07-10|end*/
+
 );
 
 /** German (formal address) (Deutsch (Sie-Form))
Index: extensions/SemanticMediaWiki/specials/Export/SMW_SpecialOWLExport.php
===================================================================
--- extensions/SemanticMediaWiki/specials/Export/SMW_SpecialOWLExport.php	(revision 6683)
+++ extensions/SemanticMediaWiki/specials/Export/SMW_SpecialOWLExport.php	(working copy)
@@ -610,6 +610,16 @@
 		} else {
 			$this->post_ns_buffer .= ">\n";
 			foreach ($data->getProperties() as $property) {
+/*op-patch|TS|2009-08-07|HaloACL|Semantic protection|start*/
+				$dv = $property->getDataValue();
+				if (isset($dv)) {
+//					if (!$dv->userCan("propertyread")) {
+//						continue;
+//					}
+				}
+/*op-patch|TS|2009-08-07|end*/
+				
+				
 				$this->queueElement($property);
 				foreach ($data->getValues($property) as $value) {
 					$this->post_ns_buffer .= "\t\t$indent<" . $property->getQName();
